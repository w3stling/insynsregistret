plugins {
    id 'java-library'
    id 'jacoco'
    id 'signing'
    id 'maven-publish'
    id 'io.github.gradle-nexus.publish-plugin' version '1.3.0'
    id 'org.sonarqube' version '4.2.1.3168'
    id 'me.champeau.gradle.jmh' version '0.5.3'
}

group 'com.apptasticsoftware'
version "${version}"

repositories {
    mavenCentral()
}

dependencies {
    testImplementation("org.junit.jupiter:junit-jupiter:5.9.3")
    testRuntimeOnly("org.junit.platform:junit-platform-launcher")
    testImplementation('org.mockito:mockito-core:5.4.0')
}

test {
    useJUnitPlatform()
    testLogging {
        events "passed", "skipped", "failed"
    }
}

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withJavadocJar()
    withSourcesJar()
}

ext.moduleName = 'com.apptasticsoftware.insynsregistret'

compileJava {
    options.encoding = "UTF-8"
    inputs.property('moduleName', moduleName)
    doFirst {
        options.compilerArgs = [
                '--module-path', classpath.asPath
        ]
        classpath = files()
    }
}

jacoco {
    toolVersion = "0.8.9"
}

jacocoTestReport {
    reports {
        xml.required = true
        xml.outputLocation = file("${buildDir}/reports/jacoco/report.xml")
    }
}

nexusPublishing {
    repositories {
        sonatype {
            nexusUrl.set(uri("https://s01.oss.sonatype.org/service/local/"))
            snapshotRepositoryUrl.set(uri("https://s01.oss.sonatype.org/content/repositories/snapshots/"))
        }
    }
    connectTimeout = Duration.ofMinutes(3)
    clientTimeout = Duration.ofMinutes(3)
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from(components.java)
            pom {
                name = 'Insynsregistret'
                description = 'Java library for extracting data from the Financial Supervisory Authority (Finansinspektionen) insider registry.'
                url = 'https://github.com/w3stling/insynsregistret'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://raw.githubusercontent.com/w3stling/insynsregistret/master/LICENSE'
                    }
                }
                developers {
                    developer {
                        id = 'w3stling'
                        name = 'Apptastic Software'
                        email = 'apptastic.software@gmail.com'
                    }
                }
                scm {
                    url = 'https://github.com/w3stling/insynsregistret'
                    connection = 'scm:git://github.com/w3stling/insynsregistret.git'
                    developerConnection = 'scm:git:ssh://github.com/w3stling/insynsregistret.git'
                }
            }
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

jmh {
    include = ['.*InsynsregistretBenchmark*']
    humanOutputFile = project.file("${project.buildDir}/reports/jmh/human.txt")
    resultsFile = project.file("${project.buildDir}/reports/jmh/results.csv")

    //benchmarkMode = 'thrpt'//'thrpt' // Benchmark mode. Available modes are: [Throughput/thrpt, AverageTime/avgt, SampleTime/sample, SingleShotTime/ss, All/all]
    forceGC = true // Should JMH force GC between iterations?
    //profilers = ['COMP', 'STACK'] //['COMP','GC', 'STACK','CL'] // Use profilers
    timeUnit = 's' // Output time unit. Available time units are: [m, s, ms, us, ns].
    verbosity = 'NORMAL' // Verbosity mode. Available modes are: [SILENT, NORMAL, EXTRA]

    timeOnIteration = '5s' // Time to spend at each measurement iteration.
    batchSize = 1 // Batch size: number of benchmark method calls per operation. (some benchmark modes can ignore this setting)
    fork = 5 // How many times to forks a single benchmark. Use 0 to disable forking altogether
    iterations = 1 // Number of measurement iterations to do.
    threads = 1 // Number of worker threads to run with.

    warmup = '3s' // Time to spend at each warmup iteration.
    warmupBatchSize = 1 // Warmup batch size: number of benchmark method calls per operation.
    warmupForks = 1 // How many warmup forks to make for a single benchmark. 0 to disable warmup forks.
    warmupIterations = 1 // Number of warmup iterations to do.
    warmupMode = 'INDI' // Warmup mode for warming up selected benchmarks. Warmup modes are: [INDI, BULK, BULK_INDI].
}

sonarqube {
    properties {
        property "sonar.projectKey", "w3stling_insynsregistret"
        property "sonar.organization", "w3stling"
        property "sonar.host.url", "https://sonarcloud.io"
    }
}